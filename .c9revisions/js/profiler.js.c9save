{"ts":1358327340028,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1358327374288,"patch":[[{"diffs":[[1,"   var baseUrlGet = (getQueryString()[\"gpx\"]==undefined || getQueryString()[\"gpx\"]==\"\") ? \"ramberget.xml\" : getQueryString()[\"gpx\"];\r\n    var getDataObj = new getData(baseUrlGet,receiveData,\"xml\",\"get\",undefined,undefined);\r\n    var trackpoints;\r\n    var profilepoints;\r\n    var climbpoints;\r\n\r\n\r\n    //Max and min altitude in meters\r\n    var maxAlt = -500.0;\r\n    var minAlt = 10000.0;\r\n    var totalDist = 0.0;\r\n    var totalGain = 0.0;\r\n    var distLineUnit = (getQueryString()[\"kmfactor\"]==undefined || getQueryString()[\"kmfactor\"]==\"\") ? 1 : parseFloat(getQueryString()[\"kmfactor\"]) ;\r\n    var textOnNthDistLine = (getQueryString()[\"nthline\"]==undefined || getQueryString()[\"nthline\"]==\"\") ? 1 : parseInt(getQueryString()[\"nthline\"]) ;\r\n\r\n    //Presentation size of curce\r\n    var profileWidth=(getQueryString()[\"pwidth\"]==undefined || getQueryString()[\"pwidth\"]==\"\") ? 1024.0 : parseFloat(getQueryString()[\"pwidth\"]) ;\r\n    var profileHeight = (getQueryString()[\"pheight\"]==undefined || getQueryString()[\"pheight\"]==\"\") ? 256.0 : parseFloat(getQueryString()[\"pheight\"]) ;\r\n\r\n\r\n    var widthFactor=1.0;\r\n    var heightFactor=1.0;\r\n    var textMargin = (getQueryString()[\"margin\"]==undefined || getQueryString()[\"margin\"]==\"\") ? 56.0 : parseFloat(getQueryString()[\"margin\"]) ;\r\n    var showGradient =(getQueryString()[\"grd\"]==undefined || getQueryString()[\"grd\"]==\"\") ? 1 : parseInt(getQueryString()[\"grd\"]) ;\r\n    var extrusionSize = 32;\r\n    var extrusionAngle = 225;\r\n    var skewAngle =(getQueryString()[\"skew\"]==undefined || getQueryString()[\"skew\"]==\"\") ? -10 : -Math.abs(parseFloat(getQueryString()[\"skew\"])) ;\r\n    var shwSkew = -45.0;\r\n    var shwSize = 0.5;\r\n\r\n    getDataObj.url = baseUrlGet;\r\n    getDataObj.getData();\r\n\r\n    //Catches the response xml\r\n    function receiveData(node)\r\n    {\r\n         trackpoints = node.getElementsByTagName(\"trkpt\");\r\n         profilepoints = new Array(trackpoints.length);\r\n\r\n\r\n         //Loop to reshape data and get max min values\r\n         var prevAlt = 0.0;\r\n         for(var i = 0; i < trackpoints.length ; i++ )\r\n         {\r\n             //Find minAlt/maxAlt\r\n             alt = getAlt(trackpoints[i]);\r\n             if(alt < minAlt){minAlt = alt;}\r\n             if(alt > maxAlt){maxAlt = alt;}\r\n\r\n             totalGain += (alt > prevAlt && i > 0)?(alt-prevAlt):0;\r\n\r\n             var localDist = 0;\r\n             if(i > 0){\r\n             localDist = haversine(\r\n                       trackpoints[i-1].getAttribute(\"lat\"),\r\n                       trackpoints[i].getAttribute(\"lat\"),\r\n                       trackpoints[i-1].getAttribute(\"lon\"),\r\n                       trackpoints[i].getAttribute(\"lon\")\r\n                       );\r\n                       totalDist += localDist;\r\n             }\r\n\r\n\r\n             profilepoints[i] = [totalDist, alt, getSlope(localDist,alt - prevAlt)];\r\n\r\n\r\n             prevAlt = alt;\r\n         }\r\n         \r\n\r\n\r\n         //profileWidth -= Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)\r\n         //profileHeight-= Math.abs(Math.tan((Math.PI/180.0)*extrusionAngle)*extrusionSize)\r\n\r\n         //Scale profile data to presentation size\r\n         widthFactor = profileWidth/totalDist;\r\n         heightFactor = profileHeight/(maxAlt - minAlt);\r\n\r\n         //Set start of curve\r\n         if(profilepoints[0][1] > minAlt)\r\n         {\r\n             CreateExtrusionForSegment( 0,\r\n                                       profileHeight,\r\n                                       (profilepoints[0][0]*widthFactor),\r\n                                       (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)),\r\n                                       extrusionSize,\r\n                                       extrusionAngle,\r\n                                       \"rgb(128,128,128)\"\r\n                                       );\r\n         }\r\n         var aPathData = new Array(profilepoints.length + 2);\r\n         aPathData[0] = \"M\" + (profilepoints[0][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)) ;\r\n         //Loop to create the curve\r\n         var climbWatch = new Array(2);\r\n         var climbRecord = -1;\r\n         for ( var i = 1; i < profilepoints.length ; i++ )\r\n         {\r\n             aPathData[i] = \" L\" + (profilepoints[i][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor));\r\n             CreateExtrusionForSegment((profilepoints[i-1][0]*widthFactor),\r\n                                       (profileHeight-((profilepoints[i-1][1]-minAlt)*heightFactor)),\r\n                                       (profilepoints[i][0]*widthFactor),\r\n                                       (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor)),\r\n                                       extrusionSize,\r\n                                       extrusionAngle,\r\n                                       profilepoints[i][2]\r\n                                       );\r\n                                       \r\n             //Record climb data\r\n             climbRecord = (profilepoints[i][1] > profilepoints[i-1][1] && climbRecord == -1 )? i: climbRecord ;\r\n             climbRecord = (profilepoints[i][1] < (profilepoints[i-1][1]-(70.0)) &&  climbRecord > -1)? -1: climbRecord ;\r\n             climbWatch[0] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[0]+(profilepoints[i][0]-profilepoints[i-1][0]):0;\r\n             climbWatch[1] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[1]+(profilepoints[i][1] -profilepoints[i-1][1] ):0;\r\n\r\n\r\n             //Qualify that climb is long enough\r\n             if(climbWatch[0] > 0.3)\r\n             {\r\n             \r\n                   var rad = Math.atan2(climbWatch[0]*1000,climbWatch[1]);\r\n                   var slope =  parseInt(90 - (180/Math.PI)*rad );\r\n                  //Qualify that climb is steep enough\r\n                  if(slope > 2.7)\r\n                  {\r\n\r\n\r\n                      CreateClimbMarker((profilepoints[climbRecord][0]*widthFactor),\r\n                                       (profilepoints[i][0]*widthFactor),\r\n                                       (profileHeight-((profilepoints[climbRecord][1]+(climbWatch[1]*0.5) )*heightFactor)),\r\n                                       climbWatch[0],\r\n                                       rad\r\n                                       );\r\n\r\n                  }\r\n                  \r\n                  climbWatch[0] = 0;\r\n                      climbWatch[1] = 0;\r\n                      climbRecord = -1;\r\n             }\r\n\r\n\r\n         }\r\n         \r\n         //Close the curve to a shape\r\n         aPathData[profilepoints.length]= \" L\" + profileWidth + \" \" + profileHeight ;\r\n         aPathData[profilepoints.length+1] = \" L0 \" + profileHeight +\"z\" ;\r\n         document.getElementById(\"masterProfile\").setAttribute(\"d\", aPathData.join(\"\"));\r\n         document.getElementById(\"masterProfileShw\").setAttribute(\"d\", aPathData.join(\"\"));\r\n         document.getElementById(\"masterProfileClimb\").setAttribute(\"d\", aPathData.join(\"\"));\r\n         document.getElementById(\"masterProfileClip\").setAttribute(\"d\", aPathData.join(\"\"));\r\n\r\n         \r\n         document.getElementById(\"masterProfileShw\").setAttribute(\"transform\",\r\n                                                                             \"translate(\" + ( Math.cos((Math.PI/180.0)*+(shwSkew))*(profileHeight+textMargin) )  + \",\" +\r\n                                                                             ((profileHeight + (profileHeight*shwSize))  ) +\r\n                                                                             \") scale(1,-\" + shwSize +\") skewX(\" + (shwSkew)+ \")\");\r\n\r\n         //Adjust position to acoomodate the extrusion\r\n         document.getElementById(\"layer1\").setAttribute(\r\n                                                        \"transform\",\r\n                                                        \"translate(0,\" + ( Math.tan((Math.PI/180.0)*skewAngle)*-(profileWidth+textMargin) ) + \") \" +\r\n                                                        \"skewY(\" + skewAngle + \")\"\r\n                                                        );\r\n         \r\n         //Adjust position to acoomodate the extrusion\r\n         document.getElementById(\"slopeComposite\").setAttribute(\r\n                                                        \"transform\",\r\n                                                        \"translate(\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin) +\r\n                                                        \",\"  + Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize) +\r\n                                                        \")\"\r\n                                                        );\r\n\r\n                                                        \r\n         document.getElementById(\"profileClipRect\").setAttribute(\"height\", profileHeight);\r\n\r\n         document.getElementById(\"gainText\").setAttribute(\"transform\",\"translate(0,\" + (6+profileHeight*0.5) +\")\");\r\n         document.getElementById(\"gainText\").firstChild.nodeValue = Math.round(totalGain) + \"m\";\r\n\r\n         document.getElementById(\"minAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\r\n         document.getElementById(\"minAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (profileHeight) +\")\");\r\n         document.getElementById(\"minAltText\").setAttribute(\"transform\",\"translate(0,\" + (profileHeight-4) +\")\");\r\n         document.getElementById(\"minAltText\").firstChild.nodeValue = minAlt + \"m\";\r\n         \r\n         document.getElementById(\"maxAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\r\n         document.getElementById(\"maxAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (0) +\")\");\r\n         document.getElementById(\"maxAltText\").setAttribute(\"transform\",\"translate(0,\" + (12) +\")\");\r\n         document.getElementById(\"maxAltText\").firstChild.nodeValue = maxAlt + \"m\";\r\n\r\n\r\n\r\n         createDistLines();\r\n\r\n\r\n    }\r\n    \r\n    function CreateExtrusionForSegment(segStartX, segStartY, segEndX,segEndY, eSize, eAngle, slopeColor)\r\n    {\r\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n    \tshape.setAttribute(\"d\", \"M\" +\r\n                                segStartX + \" \" + segStartY +\r\n                                \" L\" + segEndX + \" \" + segEndY +\r\n                                \" L\" + (segEndX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segEndY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\r\n                                \" L\" + (segStartX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segStartY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\r\n                                 \"z\" );\r\n\t\tshape.setAttribute(\"stroke\", \"#fff\");\r\n\t\tshape.setAttribute(\"stroke-width\", \"0.25\");\r\n\t\tshape.setAttribute(\"fill\", slopeColor );\r\n\t\tshape.setAttribute(\"opacity\", \"1\");\r\n        document.getElementById(\"slopeDetail\").insertBefore(shape,document.getElementById(\"slopeDetail\").firstChild);\r\n    }\r\n    \r\n      function CreateClimbMarker(segStartX, segEndX, alt, dist, slope)\r\n    {\r\n    \r\n        //CategoryCalc\r\n        var cat = Math.max(5-parseInt(Math.sin(slope)*(dist*10)),1);\r\n\r\n\t\tdocument.getElementById(\"climbClipPath\").setAttribute(\"d\",\r\n                                                                  document.getElementById(\"climbClipPath\").getAttribute(\"d\") +\r\n                                                                  \"M\" + segStartX + \" 0\" +\r\n                                                                  \"L\" + segEndX + \" \" + 0 +\r\n                                                                  \"L\" + segEndX + \" \" + profileHeight +\r\n                                                                  \"L\" + segStartX + \" \" + profileHeight +\r\n                                                                  \"z \")\r\n\r\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n\t\tshape.setAttribute(\"d\", document.getElementById(\"climbIcon\").getAttribute(\"d\"));\r\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\r\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\r\n        sx = (segStartX +(segEndX-segStartX)*0.5);\r\n        sy = (profileHeight - 8);\r\n\t\tshape.setAttribute(\"transform\", \"translate(\" + sx + \",\" + sy + \")\" );\r\n\t\tshape.setAttribute(\"stroke\", \"#777\");\r\n\t\tshape.setAttribute(\"stroke-width\", \"1\");\r\n\t\tshape.setAttribute(\"fill\", \"white\" );\r\n\t\tshape.setAttribute(\"fill-rule\", \"evenodd\" );\r\n        document.getElementById(\"climbIcons\").insertBefore(shape,document.getElementById(\"climbIcons\").firstChild);\r\n        \r\n        var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\r\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\r\n        shapeT.setAttribute(\"x\",sx -2 );\r\n        shapeT.setAttribute(\"y\", sy - 5 );\r\n        shapeT.setAttribute(\"fill\", \"#000\" );\r\n        shapeT.setAttribute(\"font-weight\", \"bold\");\r\n        var data = document.createTextNode(cat);\r\n        shapeT.appendChild(data);\r\n        document.getElementById(\"climbIcons\").appendChild(shapeT);\r\n    }\r\n    \r\n    function createDistLines()\r\n    {\r\n    \r\n             var strd =  \"M\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) + \",\" + (0) +\r\n                         \" L\" + profileWidth + \" 0\" +\r\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\r\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\r\n                         \" L\" + ((Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\r\n                         \"z\";\r\n    \r\n    \r\n\r\n             document.getElementById(\"mouseCatcher\").setAttribute(\"d\",strd);\r\n\r\n             document.getElementById(\"mouseCatcher\").setAttribute(\"transform\", \"translate(\" + textMargin +\",0)\");\r\n\r\n\r\n             //Distance in km\r\n             lineNo = totalDist*distLineUnit;\r\n             iLineNo =  parseInt(lineNo)\r\n\r\n             for(var i=0; i <= iLineNo; i++)\r\n             {\r\n              createDistLine((i*(profileWidth/lineNo)),i%textOnNthDistLine==0?(i/distLineUnit).toString():\"\");\r\n             }\r\n             createDistLine(profileWidth, Math.round(totalDist*1000)/1000);\r\n    }\r\n    \r\n    function createDistLine(xPos,dist)\r\n    {\r\n                      var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n                      var strd = \"M\" + (xPos + textMargin) + \" 0\" +\r\n                                 \" L\" + (xPos + textMargin) + \" \" + profileHeight +\r\n                                 \" L\" + ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) + \" \" + (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64) )\r\n      \t              shape.setAttribute(\"d\", strd);\r\n                      shape.setAttribute(\"stroke\", \"#ddd\");\r\n            \t      shape.setAttribute(\"stroke-width\", \"1\");\r\n               \t      shape.setAttribute(\"fill\", \"none\" );\r\n                  \t  shape.setAttribute(\"opacity\", \"1.0\");\r\n\r\n                      document.getElementById(\"distLines\").insertBefore(shape,document.getElementById(\"distLines\").firstChild);\r\n\r\n                      var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n                      sx =  ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) ;\r\n                      sy = (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64))\r\n       \t              shapeT.setAttribute(\"x\",sx );\r\n      \t              shapeT.setAttribute(\"y\", sy );\r\n               \t      shapeT.setAttribute(\"fill\", \"#000\" );\r\n                      var data = document.createTextNode(dist + (dist==\"\"? \"\" :\" km\"));\r\n                      shapeT.appendChild(data);\r\n\r\n                      document.getElementById(\"distLines\").insertBefore(shapeT,document.getElementById(\"distLines\").firstChild);\r\n    }\r\n    \r\n    function getSlope(dist,alt)\r\n    {\r\n    \r\n        if(showGradient==0){ return \"rgb(128,128,128)\";}\r\n        dist = dist*1000.0\r\n        var rad = Math.atan2(dist,alt);\r\n        var angle =  parseInt(90 - (180/Math.PI)*rad );\r\n        return \"rgb(\" +\r\n             parseInt(128 + Math.min(angle*9,127)).toString() +\r\n             \",\" +\r\n             \"128\" +\r\n             \",\" +\r\n             parseInt(Math.min(128+angle*9,127)).toString() +\r\n             \")\"\r\n    }\r\n\r\n    function getAlt(trkpt)\r\n    {\r\n             return parseFloat(trkpt.getElementsByTagName('*')[0].firstChild.nodeValue) ;\r\n    }\r\n\r\n    function getQueryString() {\r\n      var result = {}, queryString = location.search.substring(1),\r\n          re = /([^&=]+)=([^&]*)/g, m;\r\n\r\n      while (m = re.exec(queryString)) {\r\n        result[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    //Returns approximate distance in km between two lat/long values\r\n    function haversine(lat1,lat2,lon1,lon2)\r\n    {\r\n             var R = 6371;\r\n             var dLat = (lat2-lat1)*(Math.PI / 180);\r\n             var dLon = (lon2-lon1)*(Math.PI / 180);\r\n             var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                     Math.cos(lat1*(Math.PI / 180)) * Math.cos(lat2*(Math.PI / 180)) *\r\n                     Math.sin(dLon/2) * Math.sin(dLon/2);\r\n             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n             var d = R * c;\r\n             return d;\r\n    }\r\n    \r\n    //Events\r\n\r\n\tfunction drag(evt,that)\r\n\t{\r\n        var adjustedX =  evt.clientX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin);\r\n        var resultAlt = getProfileIntersectionHeight(adjustedX)[0];\r\n\r\n        document.getElementById(\"cursorLineContd\").setAttribute(\"y1\", -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize))  );\r\n   \t    document.getElementById(\"cursorLineContd\").setAttribute(\"y2\", resultAlt -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\r\n\t    document.getElementById(\"cursorLineContd\").setAttribute(\"x1\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\r\n        document.getElementById(\"cursorLineContd\").setAttribute(\"x2\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\r\n        \r\n\t    document.getElementById(\"cursorLine\").setAttribute(\"y1\", resultAlt);\r\n        document.getElementById(\"cursorLine\").setAttribute(\"y2\", profileHeight);\r\n\t    document.getElementById(\"cursorLine\").setAttribute(\"x1\",adjustedX );\r\n        document.getElementById(\"cursorLine\").setAttribute(\"x2\",adjustedX );\r\n\r\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y1\", resultAlt-(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\r\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y2\", resultAlt);\r\n\t    document.getElementById(\"cursorLineHeight\").setAttribute(\"x1\", adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\r\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"x2\", adjustedX );\r\n        \r\n        document.getElementById(\"cur\").setAttribute(\"transform\",\"translate(\" + (adjustedX) + \",\" + ( resultAlt        ) +\")\");\r\n        document.getElementById(\"cursorLineText\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\r\n        document.getElementById(\"cursorLineTextGlow\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\r\n\r\n        document.getElementById(\"cur\").setAttribute(\"visibility\",\"visible\");\r\n        document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"visible\");\r\n\r\n        document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"visible\");\r\n        document.getElementById(\"profileClipRect\").setAttribute(\"width\", adjustedX );\r\n\t}\r\n\r\n\tfunction out(evt,that)\r\n\t{\r\n         document.getElementById(\"cur\").setAttribute(\"visibility\",\"hidden\");\r\n         document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"hidden\");\r\n         document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"hidden\");\r\n\r\n\t}\r\n\r\n    function getProfileIntersectionHeight(xPos)\r\n    {\r\n             for ( var i = 0; i < profilepoints.length ; i++ )\r\n             {\r\n                 if(parseFloat(profilepoints[i][0])*widthFactor > xPos)\r\n                 {\r\n\r\n                   return  [profileHeight - ( ((profilepoints[i][1]-minAlt))*1.0)*heightFactor,  profilepoints[i-1][1]]\r\n                 }\r\n             }\r\n    }"]],"start1":0,"start2":0,"length1":0,"length2":21126}]],"length":21126,"saved":false}
{"contributors":[],"silentsave":false,"ts":1358327796603,"patch":[[{"diffs":[[0,"=\"\") ? \""],[1,"gpx/"],[0,"ramberge"]],"start1":83,"start2":83,"length1":16,"length2":20}]],"length":21130,"saved":false}
{"ts":1358327817067,"patch":[[{"diffs":[[0,"mberget."],[-1,"xml"],[1,"gpx"],[0,"\" : getQ"]],"start1":97,"start2":97,"length1":19,"length2":19}]],"length":21130,"saved":false}
{"contributors":[],"silentsave":false,"ts":1358330367562,"patch":[[{"diffs":[[0,"ope > 2."],[-1,"7"],[1,"8"],[0,")\r\n     "]],"start1":5887,"start2":5887,"length1":17,"length2":17}]],"length":21130,"saved":false}
