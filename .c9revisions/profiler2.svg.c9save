{"ts":1358326940044,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat.dtd\">\n<svg version=\"1.1\"  id=\"Canvas\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <script type=\"text/ecmascript\" xlink:href=\"helper_functions.js\"/>\n  <script type=\"text/javascript\">\n\t<![CDATA[\n\n    var baseUrlGet = (getQueryString()[\"gpx\"]==undefined || getQueryString()[\"gpx\"]==\"\") ? \"ramberget.xml\" : getQueryString()[\"gpx\"];\n    var getDataObj = new getData(baseUrlGet,receiveData,\"xml\",\"get\",undefined,undefined);\n    var trackpoints;\n    var profilepoints;\n    var climbpoints;\n\n\n    //Max and min altitude in meters\n    var maxAlt = -500.0;\n    var minAlt = 10000.0;\n    var totalDist = 0.0;\n    var totalGain = 0.0;\n    var distLineUnit = (getQueryString()[\"kmfactor\"]==undefined || getQueryString()[\"kmfactor\"]==\"\") ? 1 : parseFloat(getQueryString()[\"kmfactor\"]) ;\n    var textOnNthDistLine = (getQueryString()[\"nthline\"]==undefined || getQueryString()[\"nthline\"]==\"\") ? 1 : parseInt(getQueryString()[\"nthline\"]) ;\n\n    //Presentation size of curce\n    var profileWidth=(getQueryString()[\"pwidth\"]==undefined || getQueryString()[\"pwidth\"]==\"\") ? 1024.0 : parseFloat(getQueryString()[\"pwidth\"]) ;\n    var profileHeight = (getQueryString()[\"pheight\"]==undefined || getQueryString()[\"pheight\"]==\"\") ? 256.0 : parseFloat(getQueryString()[\"pheight\"]) ;\n\n\n    var widthFactor=1.0;\n    var heightFactor=1.0;\n    var textMargin = (getQueryString()[\"margin\"]==undefined || getQueryString()[\"margin\"]==\"\") ? 56.0 : parseFloat(getQueryString()[\"margin\"]) ;\n    var showGradient =(getQueryString()[\"grd\"]==undefined || getQueryString()[\"grd\"]==\"\") ? 1 : parseInt(getQueryString()[\"grd\"]) ;\n    var extrusionSize = 32;\n    var extrusionAngle = 225;\n    var skewAngle =(getQueryString()[\"skew\"]==undefined || getQueryString()[\"skew\"]==\"\") ? -10 : -Math.abs(parseFloat(getQueryString()[\"skew\"])) ;\n    var shwSkew = -45.0;\n    var shwSize = 0.5;\n\n    getDataObj.url = baseUrlGet;\n    getDataObj.getData();\n\n    //Catches the response xml\n    function receiveData(node)\n    {\n         trackpoints = node.getElementsByTagName(\"trkpt\");\n         profilepoints = new Array(trackpoints.length);\n\n\n         //Loop to reshape data and get max min values\n         var prevAlt = 0.0;\n         for(var i = 0; i < trackpoints.length ; i++ )\n         {\n             //Find minAlt/maxAlt\n             alt = getAlt(trackpoints[i]);\n             if(alt < minAlt){minAlt = alt;}\n             if(alt > maxAlt){maxAlt = alt;}\n\n             totalGain += (alt > prevAlt && i > 0)?(alt-prevAlt):0;\n\n             var localDist = 0;\n             if(i > 0){\n             localDist = haversine(\n                       trackpoints[i-1].getAttribute(\"lat\"),\n                       trackpoints[i].getAttribute(\"lat\"),\n                       trackpoints[i-1].getAttribute(\"lon\"),\n                       trackpoints[i].getAttribute(\"lon\")\n                       );\n                       totalDist += localDist;\n             }\n\n\n             profilepoints[i] = [totalDist, alt, getSlope(localDist,alt - prevAlt)];\n\n\n             prevAlt = alt;\n         }\n         \n\n\n         //profileWidth -= Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)\n         //profileHeight-= Math.abs(Math.tan((Math.PI/180.0)*extrusionAngle)*extrusionSize)\n\n         //Scale profile data to presentation size\n         widthFactor = profileWidth/totalDist;\n         heightFactor = profileHeight/(maxAlt - minAlt);\n\n         //Set start of curve\n         if(profilepoints[0][1] > minAlt)\n         {\n             CreateExtrusionForSegment( 0,\n                                       profileHeight,\n                                       (profilepoints[0][0]*widthFactor),\n                                       (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)),\n                                       extrusionSize,\n                                       extrusionAngle,\n                                       \"rgb(128,128,128)\"\n                                       );\n         }\n         var aPathData = new Array(profilepoints.length + 2);\n         aPathData[0] = \"M\" + (profilepoints[0][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)) ;\n         //Loop to create the curve\n         var climbWatch = new Array(2);\n         var climbRecord = -1;\n         for ( var i = 1; i < profilepoints.length ; i++ )\n         {\n             aPathData[i] = \" L\" + (profilepoints[i][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor));\n             CreateExtrusionForSegment((profilepoints[i-1][0]*widthFactor),\n                                       (profileHeight-((profilepoints[i-1][1]-minAlt)*heightFactor)),\n                                       (profilepoints[i][0]*widthFactor),\n                                       (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor)),\n                                       extrusionSize,\n                                       extrusionAngle,\n                                       profilepoints[i][2]\n                                       );\n                                       \n             //Record climb data\n             climbRecord = (profilepoints[i][1] > profilepoints[i-1][1] && climbRecord == -1 )? i: climbRecord ;\n             climbRecord = (profilepoints[i][1] < (profilepoints[i-1][1]-(70.0)) &&  climbRecord > -1)? -1: climbRecord ;\n             climbWatch[0] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[0]+(profilepoints[i][0]-profilepoints[i-1][0]):0;\n             climbWatch[1] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[1]+(profilepoints[i][1] -profilepoints[i-1][1] ):0;\n\n\n             //Qualify that climb is long enough\n             if(climbWatch[0] > 0.3)\n             {\n             \n                   var rad = Math.atan2(climbWatch[0]*1000,climbWatch[1]);\n                   var slope =  parseInt(90 - (180/Math.PI)*rad );\n                  //Qualify that climb is steep enough\n                  if(slope > 2.7)\n                  {\n\n\n                      CreateClimbMarker((profilepoints[climbRecord][0]*widthFactor),\n                                       (profilepoints[i][0]*widthFactor),\n                                       (profileHeight-((profilepoints[climbRecord][1]+(climbWatch[1]*0.5) )*heightFactor)),\n                                       climbWatch[0],\n                                       rad\n                                       );\n\n                  }\n                  \n                  climbWatch[0] = 0;\n                      climbWatch[1] = 0;\n                      climbRecord = -1;\n             }\n\n\n         }\n         \n         //Close the curve to a shape\n         aPathData[profilepoints.length]= \" L\" + profileWidth + \" \" + profileHeight ;\n         aPathData[profilepoints.length+1] = \" L0 \" + profileHeight +\"z\" ;\n         document.getElementById(\"masterProfile\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileShw\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileClimb\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileClip\").setAttribute(\"d\", aPathData.join(\"\"));\n\n         \n         document.getElementById(\"masterProfileShw\").setAttribute(\"transform\",\n                                                                             \"translate(\" + ( Math.cos((Math.PI/180.0)*+(shwSkew))*(profileHeight+textMargin) )  + \",\" +\n                                                                             ((profileHeight + (profileHeight*shwSize))  ) +\n                                                                             \") scale(1,-\" + shwSize +\") skewX(\" + (shwSkew)+ \")\");\n\n         //Adjust position to acoomodate the extrusion\n         document.getElementById(\"layer1\").setAttribute(\n                                                        \"transform\",\n                                                        \"translate(0,\" + ( Math.tan((Math.PI/180.0)*skewAngle)*-(profileWidth+textMargin) ) + \") \" +\n                                                        \"skewY(\" + skewAngle + \")\"\n                                                        );\n         \n         //Adjust position to acoomodate the extrusion\n         document.getElementById(\"slopeComposite\").setAttribute(\n                                                        \"transform\",\n                                                        \"translate(\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin) +\n                                                        \",\"  + Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize) +\n                                                        \")\"\n                                                        );\n\n                                                        \n         document.getElementById(\"profileClipRect\").setAttribute(\"height\", profileHeight);\n\n         document.getElementById(\"gainText\").setAttribute(\"transform\",\"translate(0,\" + (6+profileHeight*0.5) +\")\");\n         document.getElementById(\"gainText\").firstChild.nodeValue = Math.round(totalGain) + \"m\";\n\n         document.getElementById(\"minAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\n         document.getElementById(\"minAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (profileHeight) +\")\");\n         document.getElementById(\"minAltText\").setAttribute(\"transform\",\"translate(0,\" + (profileHeight-4) +\")\");\n         document.getElementById(\"minAltText\").firstChild.nodeValue = minAlt + \"m\";\n         \n         document.getElementById(\"maxAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\n         document.getElementById(\"maxAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (0) +\")\");\n         document.getElementById(\"maxAltText\").setAttribute(\"transform\",\"translate(0,\" + (12) +\")\");\n         document.getElementById(\"maxAltText\").firstChild.nodeValue = maxAlt + \"m\";\n\n\n\n         createDistLines();\n\n\n    }\n    \n    function CreateExtrusionForSegment(segStartX, segStartY, segEndX,segEndY, eSize, eAngle, slopeColor)\n    {\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\t\tshape.setAttribute(\"d\", \"M\" +\n                                segStartX + \" \" + segStartY +\n                                \" L\" + segEndX + \" \" + segEndY +\n                                \" L\" + (segEndX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segEndY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\n                                \" L\" + (segStartX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segStartY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\n                                 \"z\" );\n\t\tshape.setAttribute(\"stroke\", \"#fff\");\n\t\tshape.setAttribute(\"stroke-width\", \"0.25\");\n\t\tshape.setAttribute(\"fill\", slopeColor );\n\t\tshape.setAttribute(\"opacity\", \"1\");\n        document.getElementById(\"slopeDetail\").insertBefore(shape,document.getElementById(\"slopeDetail\").firstChild);\n    }\n    \n      function CreateClimbMarker(segStartX, segEndX, alt, dist, slope)\n    {\n    \n        //CategoryCalc\n        var cat = Math.max(5-parseInt(Math.sin(slope)*(dist*10)),1);\n\n\t\tdocument.getElementById(\"climbClipPath\").setAttribute(\"d\",\n                                                                  document.getElementById(\"climbClipPath\").getAttribute(\"d\") +\n                                                                  \"M\" + segStartX + \" 0\" +\n                                                                  \"L\" + segEndX + \" \" + 0 +\n                                                                  \"L\" + segEndX + \" \" + profileHeight +\n                                                                  \"L\" + segStartX + \" \" + profileHeight +\n                                                                  \"z \")\n\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\t\tshape.setAttribute(\"d\", document.getElementById(\"climbIcon\").getAttribute(\"d\"));\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\n        sx = (segStartX +(segEndX-segStartX)*0.5);\n        sy = (profileHeight - 8);\n\t\tshape.setAttribute(\"transform\", \"translate(\" + sx + \",\" + sy + \")\" );\n\t\tshape.setAttribute(\"stroke\", \"#777\");\n\t\tshape.setAttribute(\"stroke-width\", \"1\");\n\t\tshape.setAttribute(\"fill\", \"white\" );\n\t\tshape.setAttribute(\"fill-rule\", \"evenodd\" );\n        document.getElementById(\"climbIcons\").insertBefore(shape,document.getElementById(\"climbIcons\").firstChild);\n        \n        var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\n        shapeT.setAttribute(\"x\",sx -2 );\n        shapeT.setAttribute(\"y\", sy - 5 );\n        shapeT.setAttribute(\"fill\", \"#000\" );\n        shapeT.setAttribute(\"font-weight\", \"bold\");\n        var data = document.createTextNode(cat);\n        shapeT.appendChild(data);\n        document.getElementById(\"climbIcons\").appendChild(shapeT);\n    }\n    \n    function createDistLines()\n    {\n    \n             var strd =  \"M\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) + \",\" + (0) +\n                         \" L\" + profileWidth + \" 0\" +\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \" L\" + ((Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \"z\";\n    \n    \n\n             document.getElementById(\"mouseCatcher\").setAttribute(\"d\",strd);\n\n             document.getElementById(\"mouseCatcher\").setAttribute(\"transform\", \"translate(\" + textMargin +\",0)\");\n\n\n             //Distance in km\n             lineNo = totalDist*distLineUnit;\n             iLineNo =  parseInt(lineNo)\n\n             for(var i=0; i <= iLineNo; i++)\n             {\n              createDistLine((i*(profileWidth/lineNo)),i%textOnNthDistLine==0?(i/distLineUnit).toString():\"\");\n             }\n             createDistLine(profileWidth, Math.round(totalDist*1000)/1000);\n    }\n    \n    function createDistLine(xPos,dist)\n    {\n                      var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                      var strd = \"M\" + (xPos + textMargin) + \" 0\" +\n                                 \" L\" + (xPos + textMargin) + \" \" + profileHeight +\n                                 \" L\" + ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) + \" \" + (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64) )\n      \t              shape.setAttribute(\"d\", strd);\n                      shape.setAttribute(\"stroke\", \"#ddd\");\n            \t      shape.setAttribute(\"stroke-width\", \"1\");\n               \t      shape.setAttribute(\"fill\", \"none\" );\n                  \t  shape.setAttribute(\"opacity\", \"1.0\");\n\n                      document.getElementById(\"distLines\").insertBefore(shape,document.getElementById(\"distLines\").firstChild);\n\n                      var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                      sx =  ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) ;\n                      sy = (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64))\n       \t              shapeT.setAttribute(\"x\",sx );\n      \t              shapeT.setAttribute(\"y\", sy );\n               \t      shapeT.setAttribute(\"fill\", \"#000\" );\n                      var data = document.createTextNode(dist + (dist==\"\"? \"\" :\" km\"));\n                      shapeT.appendChild(data);\n\n                      document.getElementById(\"distLines\").insertBefore(shapeT,document.getElementById(\"distLines\").firstChild);\n    }\n    \n    function getSlope(dist,alt)\n    {\n    \n        if(showGradient==0){ return \"rgb(128,128,128)\";}\n        dist = dist*1000.0\n        var rad = Math.atan2(dist,alt);\n        var angle =  parseInt(90 - (180/Math.PI)*rad );\n        return \"rgb(\" +\n             parseInt(128 + Math.min(angle*9,127)).toString() +\n             \",\" +\n             \"128\" +\n             \",\" +\n             parseInt(Math.min(128+angle*9,127)).toString() +\n             \")\"\n    }\n\n    function getAlt(trkpt)\n    {\n             return parseFloat(trkpt.getElementsByTagName('*')[0].firstChild.nodeValue) ;\n    }\n\n    function getQueryString() {\n      var result = {}, queryString = location.search.substring(1),\n          re = /([^&=]+)=([^&]*)/g, m;\n\n      while (m = re.exec(queryString)) {\n        result[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n      }\n\n      return result;\n    }\n\n    //Returns approximate distance in km between two lat/long values\n    function haversine(lat1,lat2,lon1,lon2)\n    {\n             var R = 6371;\n             var dLat = (lat2-lat1)*(Math.PI / 180);\n             var dLon = (lon2-lon1)*(Math.PI / 180);\n             var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                     Math.cos(lat1*(Math.PI / 180)) * Math.cos(lat2*(Math.PI / 180)) *\n                     Math.sin(dLon/2) * Math.sin(dLon/2);\n             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n             var d = R * c;\n             return d;\n    }\n    \n    //Events\n\n\tfunction drag(evt,that)\n\t{\n        var adjustedX =  evt.clientX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin);\n        var resultAlt = getProfileIntersectionHeight(adjustedX)[0];\n\n        document.getElementById(\"cursorLineContd\").setAttribute(\"y1\", -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize))  );\n   \t    document.getElementById(\"cursorLineContd\").setAttribute(\"y2\", resultAlt -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n\t    document.getElementById(\"cursorLineContd\").setAttribute(\"x1\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\n        document.getElementById(\"cursorLineContd\").setAttribute(\"x2\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n        \n\t    document.getElementById(\"cursorLine\").setAttribute(\"y1\", resultAlt);\n        document.getElementById(\"cursorLine\").setAttribute(\"y2\", profileHeight);\n\t    document.getElementById(\"cursorLine\").setAttribute(\"x1\",adjustedX );\n        document.getElementById(\"cursorLine\").setAttribute(\"x2\",adjustedX );\n\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y1\", resultAlt-(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y2\", resultAlt);\n\t    document.getElementById(\"cursorLineHeight\").setAttribute(\"x1\", adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"x2\", adjustedX );\n        \n        document.getElementById(\"cur\").setAttribute(\"transform\",\"translate(\" + (adjustedX) + \",\" + ( resultAlt        ) +\")\");\n        document.getElementById(\"cursorLineText\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\n        document.getElementById(\"cursorLineTextGlow\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\n\n        document.getElementById(\"cur\").setAttribute(\"visibility\",\"visible\");\n        document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"visible\");\n\n        document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"visible\");\n        document.getElementById(\"profileClipRect\").setAttribute(\"width\", adjustedX );\n\t}\n\n\tfunction out(evt,that)\n\t{\n         document.getElementById(\"cur\").setAttribute(\"visibility\",\"hidden\");\n         document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"hidden\");\n         document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"hidden\");\n\n\t}\n\n    function getProfileIntersectionHeight(xPos)\n    {\n             for ( var i = 0; i < profilepoints.length ; i++ )\n             {\n                 if(parseFloat(profilepoints[i][0])*widthFactor > xPos)\n                 {\n\n                   return  [profileHeight - ( ((profilepoints[i][1]-minAlt))*1.0)*heightFactor,  profilepoints[i-1][1]]\n                 }\n             }\n    }\n\n\t]]>\n</script>\n<defs>\n    <style type=\"text/css\"><![CDATA[\n      text {\n        fill: #777;\n        font-family:Sans-serif;\n        font-weight:bold;\n        font-size:10px;\n      }\n      text.red {\n        fill: #077;\n      }\n      text.white {\n        fill: #fff;\n      }\n    ]]></style>\n    <filter id=\"Gaussian_Blur\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"6\"/>\n    </filter>\n    <filter id=\"Gaussian_Blur2\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"1\"/>\n    </filter>\n    <linearGradient id=\"ground\" x1=\"0\" x2=\"0\" y=\"0\" y2=\"1\">\n                    <stop stop-color=\"#ccc\" offset=\"0\"/>\n                    <stop stop-color=\"#777\" offset=\"1\"/>\n    </linearGradient>\n    <clipPath id=\"profileClip\">\n              <rect id=\"profileClipRect\" x=\"0\" y=\"0\" width=\"512\" height=\"300\" fill=\"#fff\"/>\n    </clipPath>\n    <clipPath id=\"climbClip\">\n              <path id=\"climbClipPath\" d=\"\" stroke-width=\"0\" stroke=\"none\" clip-rule=\"evenodd\"/>\n    </clipPath>\n    <path\n       id=\"climbIcon\"\n       d=\"m 13,-16 -2,0 -7,-6 -2,2 -5,-6 -7.5,10 -2.5,0 c 0,-7.179702 5.8202983,-13 13,-13 7.179702,0 13,5.820298 13,13 z m 3,0 C 16,-7.163444 8.836556,0 0,0 c -8.836556,0 -16,-7.163444 -16,-16 0,-8.836556 7.163444,-16 16,-16 8.836556,0 16,7.163444 16,16 z\"\n       />\n\n</defs>\n<g id=\"layer1\">\n    <text id=\"minAltText\">Min</text>\n    <rect x=\"0\" y=\"0\" height=\"1\" width=\"1024\" fill=\"#ddd\" id=\"minAltLine\"/>\n    <text id=\"maxAltText\" font-weight=\"bold\">Max</text>\n    <rect x=\"0\" y=\"0\" height=\"1\" width=\"1024\" fill=\"#ddd\" id=\"maxAltLine\"/>\n    <text id=\"gainText\" font-weight=\"bold\">Gain</text>\n    <g id=\"distLines\"/>\n   <g id=\"slopeComposite\">\n      <path id=\"masterProfileShw\" stroke=\"none\" stroke-width=\"0\" fill=\"#000\" opacity=\"0.05\" style=\"filter:url(#Gaussian_Blur)\"/>\n      <g id=\"slopeDetail\"/>\n      <path id=\"masterProfile\" stroke=\"#fff\" stroke-width=\"0\" fill=\"url(#ground)\" opacity=\"1\"  />\n      <path id=\"masterProfileClimb\"  fill=\"red\" opacity=\"0.2\" clip-path=\"url(#climbClip)\" />\n      <path id=\"masterProfileClip\"  fill=\"#0ff\" opacity=\"0.1\"  visibility=\"hidden\" clip-path=\"url(#profileClip)\"  />\n      <line id=\"cursorLineContd\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"128\" visibility=\"hidden\" stroke=\"#700\"/>\n      <line id=\"cursorLineHeight\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"128\" visibility=\"hidden\"  stroke=\"#700\"/>\n      <g id=\"climbIcons\"/>\n      <line id=\"cursorLine\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"128\" stroke=\"#077\" visibility=\"hidden\"/>\n      <g id=\"cur\" visibility=\"hidden\">\n      <text id=\"cursorLineTextGlow\" class=\"white\" stroke=\"#fff\" stroke-width=\"3\">a</text>\n      <text id=\"cursorLineText\" class=\"red\">a</text>\n      </g>\n   </g>\n   <path id=\"mouseCatcher\" fill=\"#00ffff\" onmousemove=\"drag(evt,this)\" onmouseout=\"out(evt,this)\" opacity=\"0\"/>\n\n</g>\n\n</svg>\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":23896}]],"length":23896}
{"contributors":[],"silentsave":false,"ts":1358326958167,"patch":[[{"diffs":[[0,"=\"\") ? \""],[1,"gpx/"],[0,"ramberge"]],"start1":468,"start2":468,"length1":16,"length2":20}]],"length":23900,"saved":false}
{"ts":1358327026151,"patch":[[{"diffs":[[0," ? \""],[-1,"gpx/"],[0,"ramb"]],"start1":472,"start2":472,"length1":12,"length2":8}]],"length":23896,"saved":false}
{"contributors":[],"silentsave":false,"ts":1358327462959,"patch":[[{"diffs":[[0,"ef=\""],[-1,"helper_functions.js\"/>\n  <script type=\"text/javascript\">\n\t<![CDATA[\n\n    var baseUrlGet = (getQueryString()[\"gpx\"]==undefined || getQueryString()[\"gpx\"]==\"\") ? \"ramberget.xml\" : getQueryString()[\"gpx\"];\n    var getDataObj = new getData(baseUrlGet,receiveData,\"xml\",\"get\",undefined,undefined);\n    var trackpoints;\n    var profilepoints;\n    var climbpoints;\n\n\n    //Max and min altitude in meters\n    var maxAlt = -500.0;\n    var minAlt = 10000.0;\n    var totalDist = 0.0;\n    var totalGain = 0.0;\n    var distLineUnit = (getQueryString()[\"kmfactor\"]==undefined || getQueryString()[\"kmfactor\"]==\"\") ? 1 : parseFloat(getQueryString()[\"kmfactor\"]) ;\n    var textOnNthDistLine = (getQueryString()[\"nthline\"]==undefined || getQueryString()[\"nthline\"]==\"\") ? 1 : parseInt(getQueryString()[\"nthline\"]) ;\n\n    //Presentation size of curce\n    var profileWidth=(getQueryString()[\"pwidth\"]==undefined || getQueryString()[\"pwidth\"]==\"\") ? 1024.0 : parseFloat(getQueryString()[\"pwidth\"]) ;\n    var profileHeight = (getQueryString()[\"pheight\"]==undefined || getQueryString()[\"pheight\"]==\"\") ? 256.0 : parseFloat(getQueryString()[\"pheight\"]) ;\n\n\n    var widthFactor=1.0;\n    var heightFactor=1.0;\n    var textMargin = (getQueryString()[\"margin\"]==undefined || getQueryString()[\"margin\"]==\"\") ? 56.0 : parseFloat(getQueryString()[\"margin\"]) ;\n    var showGradient =(getQueryString()[\"grd\"]==undefined || getQueryString()[\"grd\"]==\"\") ? 1 : parseInt(getQueryString()[\"grd\"]) ;\n    var extrusionSize = 32;\n    var extrusionAngle = 225;\n    var skewAngle =(getQueryString()[\"skew\"]==undefined || getQueryString()[\"skew\"]==\"\") ? -10 : -Math.abs(parseFloat(getQueryString()[\"skew\"])) ;\n    var shwSkew = -45.0;\n    var shwSize = 0.5;\n\n    getDataObj.url = baseUrlGet;\n    getDataObj.getData();\n\n    //Catches the response xml\n    function receiveData(node)\n    {\n         trackpoints = node.getElementsByTagName(\"trkpt\");\n         profilepoints = new Array(trackpoints.length);\n\n\n         //Loop to reshape data and get max min values\n         var prevAlt = 0.0;\n         for(var i = 0; i < trackpoints.length ; i++ )\n         {\n             //Find minAlt/maxAlt\n             alt = getAlt(trackpoints[i]);\n             if(alt < minAlt){minAlt = alt;}\n             if(alt > maxAlt){maxAlt = alt;}\n\n             totalGain += (alt > prevAlt && i > 0)?(alt-prevAlt):0;\n\n             var localDist = 0;\n             if(i > 0){\n             localDist = haversine(\n                       trackpoints[i-1].getAttribute(\"lat\"),\n                       trackpoints[i].getAttribute(\"lat\"),\n                       trackpoints[i-1].getAttribute(\"lon\"),\n                       trackpoints[i].getAttribute(\"lon\")\n                       );\n                       totalDist += localDist;\n             }\n\n\n             profilepoints[i] = [totalDist, alt, getSlope(localDist,alt - prevAlt)];\n\n\n             prevAlt = alt;\n         }\n         \n\n\n         //profileWidth -= Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)\n         //profileHeight-= Math.abs(Math.tan((Math.PI/180.0)*extrusionAngle)*extrusionSize)\n\n         //Scale profile data to presentation size\n         widthFactor = profileWidth/totalDist;\n         heightFactor = profileHeight/(maxAlt - minAlt);\n\n         //Set start of curve\n         if(profilepoints[0][1] > minAlt)\n         {\n             CreateExtrusionForSegment( 0,\n                                       profileHeight,\n                                       (profilepoints[0][0]*widthFactor),\n                                       (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)),\n                                       extrusionSize,\n                                       extrusionAngle,\n                                       \"rgb(128,128,128)\"\n                                       );\n         }\n         var aPathData = new Array(profilepoints.length + 2);\n         aPathData[0] = \"M\" + (profilepoints[0][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[0][1]-minAlt)*heightFactor)) ;\n         //Loop to create the curve\n         var climbWatch = new Array(2);\n         var climbRecord = -1;\n         for ( var i = 1; i < profilepoints.length ; i++ )\n         {\n             aPathData[i] = \" L\" + (profilepoints[i][0]*widthFactor) + \" \" + (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor));\n             CreateExtrusionForSegment((profilepoints[i-1][0]*widthFactor),\n                                       (profileHeight-((profilepoints[i-1][1]-minAlt)*heightFactor)),\n                                       (profilepoints[i][0]*widthFactor),\n                                       (profileHeight-((profilepoints[i][1]-minAlt)*heightFactor)),\n                                       extrusionSize,\n                                       extrusionAngle,\n                                       profilepoints[i][2]\n                                       );\n                                       \n             //Record climb data\n             climbRecord = (profilepoints[i][1] > profilepoints[i-1][1] && climbRecord == -1 )? i: climbRecord ;\n             climbRecord = (profilepoints[i][1] < (profilepoints[i-1][1]-(70.0)) &&  climbRecord > -1)? -1: climbRecord ;\n             climbWatch[0] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[0]+(profilepoints[i][0]-profilepoints[i-1][0]):0;\n             climbWatch[1] = (profilepoints[i][1]  > profilepoints[i-1][1] && i > 0)?climbWatch[1]+(profilepoints[i][1] -profilepoints[i-1][1] ):0;\n\n\n             //Qualify that climb is long enough\n             if(climbWatch[0] > 0.3)\n             {\n             \n                   var rad = Math.atan2(climbWatch[0]*1000,climbWatch[1]);\n                   var slope =  parseInt(90 - (180/Math.PI)*rad );\n                  //Qualify that climb is steep enough\n                  if(slope > 2.7)\n                  {\n\n\n                      CreateClimbMarker((profilepoints[climbRecord][0]*widthFactor),\n                                       (profilepoints[i][0]*widthFactor),\n                                       (profileHeight-((profilepoints[climbRecord][1]+(climbWatch[1]*0.5) )*heightFactor)),\n                                       climbWatch[0],\n                                       rad\n                                       );\n\n                  }\n                  \n                  climbWatch[0] = 0;\n                      climbWatch[1] = 0;\n                      climbRecord = -1;\n             }\n\n\n         }\n         \n         //Close the curve to a shape\n         aPathData[profilepoints.length]= \" L\" + profileWidth + \" \" + profileHeight ;\n         aPathData[profilepoints.length+1] = \" L0 \" + profileHeight +\"z\" ;\n         document.getElementById(\"masterProfile\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileShw\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileClimb\").setAttribute(\"d\", aPathData.join(\"\"));\n         document.getElementById(\"masterProfileClip\").setAttribute(\"d\", aPathData.join(\"\"));\n\n         \n         document.getElementById(\"masterProfileShw\").setAttribute(\"transform\",\n                                                                             \"translate(\" + ( Math.cos((Math.PI/180.0)*+(shwSkew))*(profileHeight+textMargin) )  + \",\" +\n                                                                             ((profileHeight + (profileHeight*shwSize))  ) +\n                                                                             \") scale(1,-\" + shwSize +\") skewX(\" + (shwSkew)+ \")\");\n\n         //Adjust position to acoomodate the extrusion\n         document.getElementById(\"layer1\").setAttribute(\n                                                        \"transform\",\n                                                        \"translate(0,\" + ( Math.tan((Math.PI/180.0)*skewAngle)*-(profileWidth+textMargin) ) + \") \" +\n                                                        \"skewY(\" + skewAngle + \")\"\n                                                        );\n         \n         //Adjust position to acoomodate the extrusion\n         document.getElementById(\"slopeComposite\").setAttribute(\n                                                        \"transform\",\n                                                        \"translate(\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin) +\n                                                        \",\"  + Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize) +\n                                                        \")\"\n                                                        );\n\n                                                        \n         document.getElementById(\"profileClipRect\").setAttribute(\"height\", profileHeight);\n\n         document.getElementById(\"gainText\").setAttribute(\"transform\",\"translate(0,\" + (6+profileHeight*0.5) +\")\");\n         document.getElementById(\"gainText\").firstChild.nodeValue = Math.round(totalGain) + \"m\";\n\n         document.getElementById(\"minAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\n         document.getElementById(\"minAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (profileHeight) +\")\");\n         document.getElementById(\"minAltText\").setAttribute(\"transform\",\"translate(0,\" + (profileHeight-4) +\")\");\n         document.getElementById(\"minAltText\").firstChild.nodeValue = minAlt + \"m\";\n         \n         document.getElementById(\"maxAltLine\").setAttribute(\"width\",(profileWidth + textMargin ));\n         document.getElementById(\"maxAltLine\").setAttribute(\"transform\",\"translate(\" + 0 + \",\" + (0) +\")\");\n         document.getElementById(\"maxAltText\").setAttribute(\"transform\",\"translate(0,\" + (12) +\")\");\n         document.getElementById(\"maxAltText\").firstChild.nodeValue = maxAlt + \"m\";\n\n\n\n         createDistLines();\n\n\n    }\n    \n    function CreateExtrusionForSegment(segStartX, segStartY, segEndX,segEndY, eSize, eAngle, slopeColor)\n    {\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\t\tshape.setAttribute(\"d\", \"M\" +\n                                segStartX + \" \" + segStartY +\n                                \" L\" + segEndX + \" \" + segEndY +\n                                \" L\" + (segEndX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segEndY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\n                                \" L\" + (segStartX + Math.cos((Math.PI/180.0)*eAngle)*eSize) + \" \" + (segStartY + Math.sin((Math.PI/180.0)*eAngle)*eSize) +\n                                 \"z\" );\n\t\tshape.setAttribute(\"stroke\", \"#fff\");\n\t\tshape.setAttribute(\"stroke-width\", \"0.25\");\n\t\tshape.setAttribute(\"fill\", slopeColor );\n\t\tshape.setAttribute(\"opacity\", \"1\");\n        document.getElementById(\"slopeDetail\").insertBefore(shape,document.getElementById(\"slopeDetail\").firstChild);\n    }\n    \n      function CreateClimbMarker(segStartX, segEndX, alt, dist, slope)\n    {\n    \n        //CategoryCalc\n        var cat = Math.max(5-parseInt(Math.sin(slope)*(dist*10)),1);\n\n\t\tdocument.getElementById(\"climbClipPath\").setAttribute(\"d\",\n                                                                  document.getElementById(\"climbClipPath\").getAttribute(\"d\") +\n                                                                  \"M\" + segStartX + \" 0\" +\n                                                                  \"L\" + segEndX + \" \" + 0 +\n                                                                  \"L\" + segEndX + \" \" + profileHeight +\n                                                                  \"L\" + segStartX + \" \" + profileHeight +\n                                                                  \"z \")\n\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\t\tshape.setAttribute(\"d\", document.getElementById(\"climbIcon\").getAttribute(\"d\"));\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\n        sx = (segStartX +(segEndX-segStartX)*0.5);\n        sy = (profileHeight - 8);\n\t\tshape.setAttribute(\"transform\", \"translate(\" + sx + \",\" + sy + \")\" );\n\t\tshape.setAttribute(\"stroke\", \"#777\");\n\t\tshape.setAttribute(\"stroke-width\", \"1\");\n\t\tshape.setAttribute(\"fill\", \"white\" );\n\t\tshape.setAttribute(\"fill-rule\", \"evenodd\" );\n        document.getElementById(\"climbIcons\").insertBefore(shape,document.getElementById(\"climbIcons\").firstChild);\n        \n        var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        //sx =  (((segStartX +(segEndX-segStartX)*0.5))-(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*16)) ;\n        //sy = (alt-(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*16))\n        shapeT.setAttribute(\"x\",sx -2 );\n        shapeT.setAttribute(\"y\", sy - 5 );\n        shapeT.setAttribute(\"fill\", \"#000\" );\n        shapeT.setAttribute(\"font-weight\", \"bold\");\n        var data = document.createTextNode(cat);\n        shapeT.appendChild(data);\n        document.getElementById(\"climbIcons\").appendChild(shapeT);\n    }\n    \n    function createDistLines()\n    {\n    \n             var strd =  \"M\" + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) + \",\" + (0) +\n                         \" L\" + profileWidth + \" 0\" +\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \" L\" + (profileWidth + (Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \" L\" + ((Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize))) + \" \" + (profileHeight + ( (Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)))) +\n                         \"z\";\n    \n    \n\n             document.getElementById(\"mouseCatcher\").setAttribute(\"d\",strd);\n\n             document.getElementById(\"mouseCatcher\").setAttribute(\"transform\", \"translate(\" + textMargin +\",0)\");\n\n\n             //Distance in km\n             lineNo = totalDist*distLineUnit;\n             iLineNo =  parseInt(lineNo)\n\n             for(var i=0; i <= iLineNo; i++)\n             {\n              createDistLine((i*(profileWidth/lineNo)),i%textOnNthDistLine==0?(i/distLineUnit).toString():\"\");\n             }\n             createDistLine(profileWidth, Math.round(totalDist*1000)/1000);\n    }\n    \n    function createDistLine(xPos,dist)\n    {\n                      var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                      var strd = \"M\" + (xPos + textMargin) + \" 0\" +\n                                 \" L\" + (xPos + textMargin) + \" \" + profileHeight +\n                                 \" L\" + ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) + \" \" + (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64) )\n      \t              shape.setAttribute(\"d\", strd);\n                      shape.setAttribute(\"stroke\", \"#ddd\");\n            \t      shape.setAttribute(\"stroke-width\", \"1\");\n               \t      shape.setAttribute(\"fill\", \"none\" );\n                  \t  shape.setAttribute(\"opacity\", \"1.0\");\n\n                      document.getElementById(\"distLines\").insertBefore(shape,document.getElementById(\"distLines\").firstChild);\n\n                      var shapeT = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                      sx =  ((xPos + textMargin)+(Math.cos((Math.PI/180.0)*(extrusionAngle-180))*64)) ;\n                      sy = (profileHeight+(Math.sin((Math.PI/180.0)*(extrusionAngle-180))*64))\n       \t              shapeT.setAttribute(\"x\",sx );\n      \t              shapeT.setAttribute(\"y\", sy );\n               \t      shapeT.setAttribute(\"fill\", \"#000\" );\n                      var data = document.createTextNode(dist + (dist==\"\"? \"\" :\" km\"));\n                      shapeT.appendChild(data);\n\n                      document.getElementById(\"distLines\").insertBefore(shapeT,document.getElementById(\"distLines\").firstChild);\n    }\n    \n    function getSlope(dist,alt)\n    {\n    \n        if(showGradient==0){ return \"rgb(128,128,128)\";}\n        dist = dist*1000.0\n        var rad = Math.atan2(dist,alt);\n        var angle =  parseInt(90 - (180/Math.PI)*rad );\n        return \"rgb(\" +\n             parseInt(128 + Math.min(angle*9,127)).toString() +\n             \",\" +\n             \"128\" +\n             \",\" +\n             parseInt(Math.min(128+angle*9,127)).toString() +\n             \")\"\n    }\n\n    function getAlt(trkpt)\n    {\n             return parseFloat(trkpt.getElementsByTagName('*')[0].firstChild.nodeValue) ;\n    }\n\n    function getQueryString() {\n      var result = {}, queryString = location.search.substring(1),\n          re = /([^&=]+)=([^&]*)/g, m;\n\n      while (m = re.exec(queryString)) {\n        result[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n      }\n\n      return result;\n    }\n\n    //Returns approximate distance in km between two lat/long values\n    function haversine(lat1,lat2,lon1,lon2)\n    {\n             var R = 6371;\n             var dLat = (lat2-lat1)*(Math.PI / 180);\n             var dLon = (lon2-lon1)*(Math.PI / 180);\n             var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                     Math.cos(lat1*(Math.PI / 180)) * Math.cos(lat2*(Math.PI / 180)) *\n                     Math.sin(dLon/2) * Math.sin(dLon/2);\n             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n             var d = R * c;\n             return d;\n    }\n    \n    //Events\n\n\tfunction drag(evt,that)\n\t{\n        var adjustedX =  evt.clientX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)+textMargin);\n        var resultAlt = getProfileIntersectionHeight(adjustedX)[0];\n\n        document.getElementById(\"cursorLineContd\").setAttribute(\"y1\", -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize))  );\n   \t    document.getElementById(\"cursorLineContd\").setAttribute(\"y2\", resultAlt -(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n\t    document.getElementById(\"cursorLineContd\").setAttribute(\"x1\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\n        document.getElementById(\"cursorLineContd\").setAttribute(\"x2\",adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n        \n\t    document.getElementById(\"cursorLine\").setAttribute(\"y1\", resultAlt);\n        document.getElementById(\"cursorLine\").setAttribute(\"y2\", profileHeight);\n\t    document.getElementById(\"cursorLine\").setAttribute(\"x1\",adjustedX );\n        document.getElementById(\"cursorLine\").setAttribute(\"x2\",adjustedX );\n\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y1\", resultAlt-(Math.abs(Math.sin((Math.PI/180.0)*extrusionAngle)*extrusionSize)));\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"y2\", resultAlt);\n\t    document.getElementById(\"cursorLineHeight\").setAttribute(\"x1\", adjustedX -(Math.abs(Math.cos((Math.PI/180.0)*extrusionAngle)*extrusionSize)) );\n        document.getElementById(\"cursorLineHeight\").setAttribute(\"x2\", adjustedX );\n        \n        document.getElementById(\"cur\").setAttribute(\"transform\",\"translate(\" + (adjustedX) + \",\" + ( resultAlt        ) +\")\");\n        document.getElementById(\"cursorLineText\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\n        document.getElementById(\"cursorLineTextGlow\").firstChild.nodeValue = Math.round(getProfileIntersectionHeight(adjustedX)[1]) + \"m | \" + (Math.round((adjustedX/widthFactor)*1000)/1000)  + \"km\";\n\n        document.getElementById(\"cur\").setAttribute(\"visibility\",\"visible\");\n        document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"visible\");\n\n        document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"visible\");\n        document.getElementById(\"profileClipRect\").setAttribute(\"width\", adjustedX );\n\t}\n\n\tfunction out(evt,that)\n\t{\n         document.getElementById(\"cur\").setAttribute(\"visibility\",\"hidden\");\n         document.getElementById(\"cursorLine\").setAttribute(\"visibility\",\"hidden\");\n         document.getElementById(\"masterProfileClip\").setAttribute(\"visibility\",\"hidden\");\n\n\t}\n\n    function getProfileIntersectionHeight(xPos)\n    {\n             for ( var i = 0; i < profilepoints.length ; i++ )\n             {\n                 if(parseFloat(profilepoints[i][0])*widthFactor > xPos)\n                 {\n\n                   return  [profileHeight - ( ((profilepoints[i][1]-minAlt))*1.0)*heightFactor,  profilepoints[i-1][1]]\n                 }\n             }\n    }\n\n\t]]>\n</script>"],[1,"js/helper_functions.js\"/>\n  <script type=\"text/ecmascript\" xlink:href=\"js/profiler.js\"/>\n  "],[0,"\n<de"]],"start1":311,"start2":311,"length1":20817,"length2":99}]],"length":3178,"saved":false}
